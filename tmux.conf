## Use Ctrl-A as command prefix, like screen:
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

## Familiar keys please.
set-window-option -g mode-keys vi
set-option -g status-keys vi

## Use xterm keys. Vim doesn't understand screen/tmux keycodes at all. This is
## likely due to a screwed up terminfo, but whatcha gonna do?
set-window-option -g xterm-keys on

## Okay. We want a term that works in tmux, that supports 256 colors, and that
## advertises xterm keycodes as per the above settings. There is no such thing.
## The following, it turns out, comes close, even though lying to client apps
## about the term is not a great proposition.
#set-option -g default-terminal "xterm-256color"
## This may require starting tmux with option -2 if the parent term wrongly
## reports, say, "xterm" instead of "xterm-256color" (yes Gnome terminal, I
## mean you).
## 2016/09/01 Tentatively re-enable the correct TERM. Counting on Vim settings
## to do the right thing.
set-option -g default-terminal "screen-256color"

## Count windows and panes from 1 up:
set-option -g base-index 1
set-window-option -g pane-base-index 1

## And renumber them as they get created/deleted.
set-option -g renumber-windows on

## Resize by window, not session:
set-window-option -g aggressive-resize on

## More scrollback capacity:
set-option -g history-limit 100000

## Don't wait on escape sequences:
set-option -s escape-time 0

## Nicer shortcuts for prev/next window:
bind-key C-PgUp previous-window
bind-key C-PgDn next-window

## Turn on mouse support.
## Options changed in tmux 2+ so we have to account for that. :(
if-shell "test `tmux -V | cut -d' ' -f2 | cut -d '.' -f1` -ge 2" \
  "set-option -g mouse on" \
  "set-window-option -g mode-mouse on ; set-option -g mouse-select-pane on ; set-option -g mouse-resize-pane on ; set-option -g mouse-select-window on"

## Set window notifications
set-window-option -g monitor-activity on

## Automatically set window title
set-window-option -g automatic-rename

## Highlight active window
set-window-option -g window-status-current-bg blue

## Display messages for 2 seconds:
set-option -g display-time 2000

## Smart pane switching with awareness of Vim splits.
## See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-Left  if-shell "$is_vim" "send-keys C-Left"  "select-pane -L"
bind-key -n C-Down  if-shell "$is_vim" "send-keys C-Down"  "select-pane -D"
bind-key -n C-Up    if-shell "$is_vim" "send-keys C-Up"    "select-pane -U"
bind-key -n C-Right if-shell "$is_vim" "send-keys C-Right" "select-pane -R"
bind-key -n C-\     if-shell "$is_vim" "send-keys C-\\"    "select-pane -l"
## Make C-<direction> shortcuts available within tmux:
bind-key -n S-C-Left  send-keys C-Left
bind-key -n S-C-Down  send-keys C-Down
bind-key -n S-C-Up    send-keys C-Up
bind-key -n S-C-Right send-keys C-Right


## Load settings generated by tmuxline.vim. See .vimrc.conf for the details.
if-shell "test -f ~/.vim/tmuxline.conf" \
  "source-file ~/.vim/tmuxline.conf"
