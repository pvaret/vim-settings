*sfe.txt*       An abstract front-end for Mercurial/Git/Bazaar

        Copyright (c) 2009-2010 Takeshi NISHIDA

ScmFrontEnd                                                              *sfe*

INTRODUCTION                    |sfe-introduction|
INSTALLATION                    |sfe-installation|
USAGE                           |sfe-usage|
COMMANDS                        |sfe-commands|
OPTIONS                         |sfe-options|
CHANGELOG                       |sfe-changelog|
ABOUT                           |sfe-about|

==============================================================================
INTRODUCTION                                                *sfe-introduction*

ScmFrontEnd is a plugin to manage your repositories of various SCM system
(VCS). ScmFrontEnd provides an abstract interface, so you can manage
repositories without being aware of differences between SCM systems.

Features:
  - Mercurial support
  - Git support
  - Bazaar support
  - Abstract interface
  - Many commands
  - Syntax highlighting for status and diff in commit buffer.
  - Syntax highlighting for annotate buffer
  - Completion of revision/branch names
  - Completion of locations for pull/push
  - Repositories report on status line
  - Collaboration with Fuzzyfinder plugin


==============================================================================
INSTALLATION                                                *sfe-installation*

Put all files into your runtime directory. If you have the zip file, extract
it to your runtime directory.

You should place the files as follows:
>
        <your runtime directory>/plugin/sfe.vim
        <your runtime directory>/doc/sfe.txt
        ...
<
If you are disgusted to make your runtime directory confused with a lot of
plugins, put each of the plugins into a directory individually and just add
the directory path to 'runtimepath'. It's easy to uninstall plugins.

Then update your help tags files to enable help for this plugin. See
|add-local-help| for details.

Requirements: ~

- L9 library (vimscript #3252)

Optional Enhancement: ~

- FuzzyFinder (vimscript #1984)


==============================================================================
USAGE                                                              *sfe-usage*

See |sfe-commands|.

                                                              *sfe-statusline*
                                                           *g:sfe_getStatus()*
To Show Repositories Information In Status Line ~

Use g:sfe_getStatus(). (see also: |'statusline'|)

                                                             *sfe-fuzzyfinder*
Fuzzyfinder Plugin ~

ScmFrontEnd uses APIs of FuzzyFinder. Following commands are dependent on
FuzzyFinder:

        :SfeFindFile


==============================================================================
COMMANDS                                                        *sfe-commands*

All commands is for a reposity including a file of current buffer.

If ScmFrontEnd command was executed with a ! modifier, the priority of SCM systems
is reversed.

                                                                 *:SfeCommand*
:SfeCommand[!]                  (Default mapping: \s:)

        Executes any command you input.

                                                              *:SfeCommitFile*
:SfeCommitFile[!]               (Default mapping: \sC)

        Opens temporary buffer for you to enter commit message. Write the
        commit buffer and a file whose buffer was current before is committed.

                Used SCM commands ~
                hg  : commit
                git : commit
                bzr : commit

                                                           *:SfeCommitTracked*
:SfeCommitTracked[!]            (Default mapping: \s<C-c>)

        Opens temporary buffer for you to enter commit message. Write the
        commit buffer and all tracked files are committed.

                Used SCM commands ~
                hg  : commit
                git : commit -a
                bzr : commit

                                                               *:SfeCommitAll*
:SfeCommitAll[!]                (Default mapping: \sc)

        Opens temporary buffer for you to enter commit message. Write the
        commit buffer and all files in a working directory of a current
        repository are committed.

        This command is different from |:SfeCommitTracked| in adding untracked
        files to the current repository.

                Used SCM commands ~
                hg  : commit -A
                git : add -a && commit -a
                bzr : add && commit

                                                              *:SfeRecordFile*
:SfeRecordFile[!]               (Default mapping: \sE)

        TODO

                Used SCM commands ~
                hg  : record
                git : (unavailable)
                bzr : (unavailable)

                                                               *:SfeRecordAll*
:SfeRecordAll[!]                (Default mapping: \se)

        TODO

                Used SCM commands ~
                hg  : record -A
                git : (unavailable)
                bzr : (unavailable)

                                                                *:SfeCheckout*
:SfeCheckout[!]                 (Default mapping: \so)

        Checkouts specified revision.

                Used SCM commands ~
                hg  : update
                git : checkout
                bzr : (unavailable)

                                                                   *:SfeMerge*
:SfeMerge[!]                    (Default mapping: \sm)

        Merges working directory of a current repository with specified
        revision.

                Used SCM commands ~
                hg  : merge
                git : merge
                bzr : (unavailable)

                                                                  *:SfeBranch*
:SfeBranch[!]                   (Default mapping: \sb)

        Creates new branch.

                Used SCM commands ~
                hg  : branch
                git : checkout -b
                bzr : (unavailable)

                                                            *:SfeBranchDelete*
:SfeBranchDelete[!]             (Default mapping: \sB)

        Deletes a branch.

                Used SCM commands ~
                hg  : (unavailable)
                git : branch -d
                bzr : (unavailable)

                                                                  *:SfeRebase*
:SfeRebase[!]                   (Default mapping: \sr)

        Moves current branch onto specified revision/branch.

                Used SCM commands ~
                hg  : rebase --keepbranches -b . -d <revision/branch>
                git : rebase <revision/branch>
                bzr : (unavailable)

                                                                   *:SfeStrip*
:SfeStrip[!]                   (Default mapping: \st)

        Strips a revision and all its descendants from a current repository.

                Used SCM commands ~
                hg  : strip <revision>
                git : (unavailable)
                bzr : (unavailable)

                                                                    *:SfePull*
:SfePull[!]                     (Default mapping: \s[)

        Pulls changes from specified repository.

                Used SCM commands ~
                hg  : pull
                git : pull
                bzr : pull

                                                                    *:SfePush*
:SfePush[!]                     (Default mapping: \s])

        Pushes changes to specified repository.

                Used SCM commands ~
                hg  : push
                git : push
                bzr : push

                                                                *:SfeDiffFile*
:SfeDiffFile[!]                 (Default mapping: \sD)

        Starts diff mode (like vimdiff) in new tabpage between a file of a
        current buffer and its version of specified revision.

                Used SCM commands ~
                hg  : cat
                git : cat-file -p
                bzr : cat

                                                                 *:SfeDiffAll*
:SfeDiffAll[!]                  (Default mapping: \sd)

        Shows differences between all files in a working directory of a
        current repository and specified revision.

                Used SCM commands ~
                hg  : diff
                git : diff
                bzr : diff

                                                                 *:SfeLogFile*
:SfeLogFile[!]                  (Default mapping: \sL)

        Shows revision history related to a file of a current buffer. (see
        also: |g:sfe_hgLogOption| |g:sfe_gitLogOption| |g:sfe_bzrLogOption|)

                Used SCM commands ~
                hg  : glog
                git : log
                bzr : log

                                                                  *:SfeLogAll*
:SfeLogAll[!]                   (Default mapping: \sl)

        Shows revision history. (see also: |g:sfe_hgLogOption|
        |g:sfe_gitLogOption| |g:sfe_bzrLogOption|)

                Used SCM commands ~
                hg  : glog
                git : log
                bzr : log

                                                            *:SfeAnnotateFile*
:SfeAnnotateFile[!]             (Default mapping: \sn)

        Shows commit information per file line.

        Lines which were modified at the commit of specified revision or added
        at the initial commit are highlighted.

                Used SCM commands ~
                hg  : annotate -nudq
                git : blame
                bzr : annotate --all --long

                                                                  *:SfeStatus*
:SfeStatus[!]                   (Default mapping: \ss)

        Shows a list of changed files.

                Used SCM commands ~
                hg  : status
                git : diff --name-status && ls-files --exclude-standard -o
                bzr : status

                                                                    *:SfeGrep*
:SfeGrep[!]                     (Default mapping: \sg)

        Searches for specified pattern and creates a |quickfix| list.

                Used SCM commands ~
                hg  : grep -n
                git : grep -n -e
                bzr : (unavailable)

                                                            *:SfeLoadModified*
:SfeLoadModified[!]             (Default mapping: \s!)

        Loads all modified files with vim after unloading (by :bdelete)
        buffers which are not modified files.

                Used SCM commands ~
                hg  : status -mn
                git : ls-files -m
                bzr : status -SV

                                                                 *:SfeLoadAll*
:SfeLoadAll[!]                  (Default mapping: \s<CR>)

        Loads all tracked files with vim after unloading (by :bdelete) buffers
        which are not tracked files.

                Used SCM commands ~
                hg  : locate -f
                git : ls-files
                bzr : ls

                                                                *:SfeFindFile*
:SfeFindFile[!]                 (Default mapping: \sf)

        Opens a selected file from all tracked files using Fuzzyfinder. 
        (see also: |sfe-fuzzyfinder|)

                Used SCM commands ~
                hg  : locate -f
                git : ls-files
                bzr : ls

==============================================================================
OPTIONS                                                          *sfe-options*

                                                      *g:sfe_availableScms*  >
  let g:sfe_availableScms = ['git', 'mercurial', 'bazaar']
<
        Names of SCM systems which you want to use.

        If repositories of more than one SCM systems are found, the repository
        of SCM system which appears before others in g:sfe_availableScms
        has a priority.

                                                          *g:sfe_mapLeader*  >
  let g:sfe_mapLeader = '\s'
<
        Prefix of key sequences which are mapped to ScmFrontEnd commands.

                                                 *g:sfe_mapLeaderAlternate*  >
  let g:sfe_mapLeaderAlternate = '\S'
<
        Prefix of key sequences which are mapped to ScmFrontEnd commands.

        This executes same commands as |g:sfe_mapLeader| except that reverses
        the priority of SCM systems.

                                                      *g:sfe_mapKeyCommand*  >
  let g:sfe_mapKeyCommand       = ':'
<                                                  *g:sfe_mapKeyCommitFile*  >
  let g:sfe_mapKeyCommitFile    = 'C'
<                                               *g:sfe_mapKeyCommitTracked*  >
  let g:sfe_mapKeyCommitTracked = '<C-c>'
<                                                   *g:sfe_mapKeyCommitAll*  >
  let g:sfe_mapKeyCommitAll     = 'c'
<                                                    *g:sfe_mapKeyCheckout*  >
  let g:sfe_mapKeyCheckout      = 'o'
<                                                       *g:sfe_mapKeyMerge*  >
  let g:sfe_mapKeyMerge         = 'm'
<                                                      *g:sfe_mapKeyBranch*  >
  let g:sfe_mapKeyBranch        = 'b'
<                                                *g:sfe_mapKeyBranchDelete*  >
  let g:sfe_mapKeyBranchDelete  = 'B'
<                                                      *g:sfe_mapKeyRebase*  >
  let g:sfe_mapKeyRebase        = 'r'
<                                                       *g:sfe_mapKeyStrip*  >
  let g:sfe_mapKeyStrip         = 't'
<                                                        *g:sfe_mapKeyPull*  >
  let g:sfe_mapKeyPull          = '['
<                                                        *g:sfe_mapKeyPush*  >
  let g:sfe_mapKeyPush          = ']'
<                                                    *g:sfe_mapKeyDiffFile*  >
  let g:sfe_mapKeyDiffFile      = 'D'
<                                                     *g:sfe_mapKeyDiffAll*  >
  let g:sfe_mapKeyDiffAll       = 'd'
<                                                     *g:sfe_mapKeyLogFile*  >
  let g:sfe_mapKeyLogFile       = 'L'
<                                                      *g:sfe_mapKeyLogAll*  >
  let g:sfe_mapKeyLogAll        = 'l'
<                                                *g:sfe_mapKeyAnnotateFile*  >
  let g:sfe_mapKeyAnnotateFile  = 'n'
<                                                      *g:sfe_mapKeyStatus*  >
  let g:sfe_mapKeyStatus        = 's'
<                                                        *g:sfe_mapKeyGrep*  >
  let g:sfe_mapKeyGrep          = 'g'
<                                                *g:sfe_mapKeyLoadModified*  >
  let g:sfe_mapKeyLoadModified  = '!'
<                                                     *g:sfe_mapKeyLoadAll*  >
  let g:sfe_mapKeyLoadAll       = '<CR>'
<                                                    *g:sfe_mapKeyFindFile*  >
  let g:sfe_mapKeyFindFile      = 'f'
<
        Parts of key sequences following |g:sfe_mapLeader| or
        |g:sfe_mapLeaderAlternate|, which are mapped to ScmFrontEnd commands.

                                                        *g:sfe_hgLocations*  >
  let g:sfe_hgLocations = [
        \ 'http://bitbucket.org/<account>/${basename}',
        \ 'ssh://hg@bitbucket.org/<account>/${basename}',]
<                                                      *g:sfe_gitLocations*  >
  let g:sfe_gitLocations = [
        \ 'git://github.com/<account>/${basename}.git', ]
<                                                      *g:sfe_bzrLocations*  >
  let g:sfe_bzrLocations = []
<
        Repository locations used as completion candidates in SfePull and
        SfePush.

        '${basename}' will be replaced with a root directory name.

                                                      *g:sfe_hgPullIsFetch*  >
  let g:sfe_hgPullIsFetch = 0
<
        If non-zero, SfePull command executes 'hg fetch' instead of 'hg pull'.

                                                        *g:sfe_hgLogOption*  >
  let g:sfe_hgLogOption  = '--style compact'
<                                                      *g:sfe_gitLogOption*  >
  let g:sfe_gitLogOption = '--all --graph --pretty=format:''%h (%ci) %s'''
<                                                      *g:sfe_bzrLogOption*  >
  let g:sfe_bzrLogOption = '--line'
<
        Options for the log command of each SCM system.


==============================================================================
CHANGELOG                                                      *sfe-changelog*

1.0: [TODO]
  - From this version, L9 library (vimscript #3252) is required.
  - Renamed this plugin to "ScmFrontEnd" from "MinSCM", and this is
    abbreviated to "sfe" in the source code and filenames. All commands and
    options are renamed.
  - Added SfeStrip command.
  - Added SfeRecordFile and SfeRecordAll command.
  - Changed rebase command for Mercurial.
  - Fixed a cd bug on Windows.

0.7.2:
  - Fixed to correspond to API of Fuzzyfinder version 3.2.

0.7.1:
  - Fixed to correspond to API of Fuzzyfinder version 3.0.

0.7.0:
  - Improved the location completion for Mercurial repositories. Now
    MinSCMLoadPull/MinSCMLoadPush can complete aliases for remote
    repositories.

0.6.0:
  - Added MinSCMLogFile command.
  - Added MinSCMLoadPull command.
  - Added MinSCMLoadPush command.
  - Added g:minscm_hgLocations option.
  - Added g:minscm_gitLocations option.
  - Added g:minscm_bzrLocations option.
  - Added g:minscm_hgPullIsFetch option.
  - Renamed MinSCMLog command to MinSCMLogAll.
  - Changed MinSCMCommand command to use :! command instead of system()
    function.

0.5.0:
  - Added MinSCMLoadModified command.
  - Improved MinSCMAnnotateFile command to highlight lines which were modified
    at the commit of specified revision or added at the initial commit.
  - Changed default values of g:minscm_hgLogOption, g:minscm_gitLogOption, and
    g:minscm_bzrLogOption to limit a number of revisions to show.

0.4.0:
  - Added MinSCMAnnotateFile command.
  - Added g:minscm_mapKeyCommand, g:minscm_mapKeyCommitFile,
    g:minscm_mapKeyCommitTracked, g:minscm_mapKeyCommitAll,
    g:minscm_mapKeyCheckout, g:minscm_mapKeyMerge, g:minscm_mapKeyBranch,
    g:minscm_mapKeyBranchDelete, g:minscm_mapKeyRebase,
    g:minscm_mapKeyDiffFile, g:minscm_mapKeyDiffAll, g:minscm_mapKeyLog,
    g:minscm_mapKeyAnnotateFile, g:minscm_mapKeyStatus, g:minscm_mapKeyGrep,
    g:minscm_mapKeyLoadAll, and g:minscm_mapKeyFindFile options.

0.3.0:
  - Added g:minscm_hgLogOption, g:minscm_gitLogOption, and
    g:minscm_bzrLogOption options.
  - Improved MinSCMGrep command and now it creates a quickfix list.
  - Changed default log style for Mercurial repositories.
  - Fixed a bug that MinSCMLog command for Mercurial repositories could not
    show graph log in some environments (thanks to mii for the patch).
  - Fixed a bug that MinSCMCommitFile, MinSCMCommitTracked, and
    MinSCMCommitAll commands for repositories which had not been committed
    didn't work.

0.2.1:
  - Fixed a bug that the log command for Mercurial repositories didn't work on
    Windows.

0.2.0:
  - Changed not to show modified files number on a status line.
  - Changed highlight of a commit buffer.
  - Added MinSCMFindFile command.
  - Added Japanese help (doc/minscm.jax).

0.1.0:
  - First release.


==============================================================================
ABOUT                                   *sfe-about* *sfe-contact* *sfe-author*

Author:  Takeshi NISHIDA <ns9tks@DELETE-ME.gmail.com>
Licence: MIT Licence
URL:     http://www.vim.org/scripts/script.php?script_id=2637
         http://bitbucket.org/ns9tks/vim-minscm/

Bugs/Issues/Suggestions/Improvements ~

Please submit to http://bitbucket.org/ns9tks/vim-minscm/issues/ .

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
